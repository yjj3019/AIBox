# 프롬프트
당신은 파이썬 고급 개발을 지원하는 AI 어시스턴트입니다.  
다음의 요구사항을 반드시 준수해 주세요.

## 1. 스마트한 개발 가이드
- 제시된 요구사항 외에도, 내가 미처 생각하지 못한 부분까지 고려하여 추가적인 개선점이나 주의사항을 능동적으로 안내해 주세요.
- 보안, 성능, 확장성, 테스트, 유지보수, 문서화 등 모든 관점에서 조언을 제공하세요.
- 최신 파이썬 트렌드와 라이브러리, 베스트 프랙티스도 함께 추천해 주세요.

## 2. 기능 및 소스코드 누락/축소 방지
- 내가 요청한 기능을 절대로 임의로 축소하거나 누락하지 마세요.
- 모든 기능이 정상적으로 구현되어 있는지 항상 확인하고, 누락된 부분이 있다면 반드시 알려주세요.
- 구현된 소스코드는 상세하게 설명하고, 각 함수/클래스/모듈의 역할을 명확하게 문서화해 주세요.

## 3. 주기적 점검 및 리포트
- 개발 진행 중에는 일정 주기로 전체 기능 목록과 소스코드를 점검하여, 누락이나 축소된 부분이 없는지 확인해 주세요.
- 점검 결과를 요약 보고서 형태로 제공하고, 개선해야 할 부분이 있으면 구체적으로 안내해 주세요.

## 4. 예시 요청
예를 들어, "데이터 분석 파이프라인을 개발해줘"라고 하면,
- 내가 요청하지 않은 데이터 검증, 에러 처리, 성능 튜닝, 확장성, 테스트 코드 등도 함께 제안해 주세요.
- 전체 파이프라인 기능이 구현되어 있는지 주기적으로 점검해 주세요.

## 5. 기타
- 모든 답변은 파이썬 코드와 함께, 코드의 동작 원리 및 사용법을 친절하게 설명해 주세요.
- 필요시 추가적인 질문을 통해 요구사항을 명확히 해 주세요.

이 가이드에 따라 파이썬 고급 개발을 지원해 주세요.



최초 시작
파일로 첨부한 sos_analyzer.py 는 현재 개발 진행중인 코드입니다.
git 으로 첨부한 sos_analyzer_old.py 는 과거에 개발한 소스코드입니다.

원하는 내용에 대해서 언급 하겠습니다.
1. sosreport 에 대해서 압축을 해제하고 생성된 파일을 기준으로 파싱을 합니다. 
- 첫번째로 sosreport 기반으로 리눅스 시스템 분석에 필요한 전체 로그 및 설정에 대해서 metadata .json 에 저장합니다.
- sar data 는 모든 내용을 sar data 용 .json 에 저장합니다.
- 이제 저장된 2개의 .json 을 기준으로 분석을 진행합니다. 

2. sos_analyzer_old.py 기능을 면밀히 검토해서 sos_analyzer.py 에 반영해주세요.
- sos_analyzer.py 파일을 기준으로 부족한 부분에 대해서 보충해주세요.
- 다만, sos_analyzer_old.py 에 존재하는 LLM 통신 관련 로직은 고려하지 않아도 됩니다.
- LLM 통신 로직은 현재 개발중인 sos_analyzer.py 파일의 내용을 사용합니다.
- 리눅스 분석에 능통한 전문 파이썬 개발자가 개발하는것과 같은 퀄리티를 기대합니다.




시스템 요약
AI 종합 분석
AI 분석: 심각한 이슈
AI 분석: 경고 사항
AI 분석: 권장사항
자원 사용 현황
- CPU Usage (%)
- Memory Usage (KB)
- System Load Average
- Disk I/O (kB/s)
- Swap Usage (%)
- Network Traffic ( Network UP 되어 있는 인터페이스 기준 )
스토리지 및 파일 시스템
네트워크 정보
- IP4 상세 정보
- 라우팅 테이블
- ETHTOOL 상태
- NETDEV 통계
- 네트워크 본딩
프로세스 및 리소스
-리소스 사용 현황 (상위 5개 사용자)
- Top 5 CPU 사용 프로세스
- Top 5 메모리 사용 프로세스
- Uninterruptible Sleep Processes
- Zombie Processes
AI 선정 긴급 보안 위협 (최대 10개)


시스템 로그 파일 (logs.py)
logs 플러그인은 시스템의 주요 로그 파일을 수집합니다. /etc/rsyslog.conf 와 /etc/syslog.conf 파일을 먼저 분석해서 로그 파일 위치를 파악한 후, 기본적으로 다음 경로의 파일들을 수집 목록에 추가합니다.

/var/log/auth.log*: 인증 관련 로그
/var/log/boot.log: 부팅 과정 로그
/var/log/dist-upgrade: 배포판 업그레이드 관련 로그
/var/log/installer: 시스템 설치 관련 로그
/var/log/kern.log*: 커널 로그
/var/log/messages*: 시스템 전반의 주요 메시지 로그
/var/log/secure*: 보안 및 인증 로그 (주로 Red Hat 계열)
/var/log/syslog*: 시스템 로그 (주로 Debian 계열)
/var/log/udev: 장치 관리자(udev) 로그

또한, systemd 환경에서는 journald 로그도 함께 수집하며 (journalctl 명령어 사용), 로그 설정 파일 자체도 수집 대상에 포함됩니다.

/etc/rsyslog.conf
/etc/rsyslog.d (디렉토리 전체)
/etc/syslog.conf

핵심 시스템 설정 파일 (system.py)
system 플러그인은 시스템의 핵심 설정 정보들을 수집하며, 주로 다음 경로의 파일들이 포함됩니다.

/proc/sys: 커널 파라미터 정보 (가상 파일시스템)
/etc/sysconfig: 시스템 설정 스크립트 (주로 Red Hat 계열)
/etc/environment: 시스템 전역 환경 변수 설정 파일
